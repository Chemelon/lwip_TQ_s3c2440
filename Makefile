##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.17.1] date: [Tue Jan 10 20:36:04 CST 2023]
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET = lwip


######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -O0


#######################################
# paths
#######################################
# Build path
BUILD_DIR = build

######################################
# source
######################################
# C sources
C_SOURCES =  \
lwip-1.4.1/src/core/def.c \
lwip-1.4.1/src/core/dhcp.c \
lwip-1.4.1/src/core/dns.c \
lwip-1.4.1/src/core/init.c \
lwip-1.4.1/src/core/mem.c \
lwip-1.4.1/src/core/memp.c \
lwip-1.4.1/src/core/netif.c \
lwip-1.4.1/src/core/pbuf.c \
lwip-1.4.1/src/core/raw.c \
lwip-1.4.1/src/core/stats.c \
lwip-1.4.1/src/core/sys.c \
lwip-1.4.1/src/core/tcp_in.c \
lwip-1.4.1/src/core/tcp_out.c \
lwip-1.4.1/src/core/tcp.c \
lwip-1.4.1/src/core/timers.c \
lwip-1.4.1/src/core/udp.c \
lwip-1.4.1/src/core/ipv4/autoip.c \
lwip-1.4.1/src/core/ipv4/icmp.c \
lwip-1.4.1/src/core/ipv4/igmp.c \
lwip-1.4.1/src/core/ipv4/inet_chksum.c \
lwip-1.4.1/src/core/ipv4/inet.c \
lwip-1.4.1/src/core/ipv4/ip_addr.c \
lwip-1.4.1/src/core/ipv4/ip_frag.c \
lwip-1.4.1/src/core/ipv4/ip.c \
lwip-1.4.1/src/netif/etharp.c \
lwip-1.4.1/src/netif/ethernetif.c \
lwip-1.4.1/src/netif/slipif.c \
\
2440bsp/main.c \
2440bsp/start.c \
2440bsp/usart.c \
2440bsp/nand.c \
2440bsp/irq.c \
2440bsp/exti.c \
2440bsp/dm9000.c \
2440bsp/timer.c 


# ASM sources
ASM_SOURCES =  \
2440bsp/start2.s


#######################################
# binaries
#######################################
PREFIX = arm-s3c2440-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=arm920t

# fpu
# NONE for Cortex-M0/M0+/M3

# float-abi


# mcu
MCU = $(CPU) $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS =



# AS includes
AS_INCLUDES =

# C includes
C_INCLUDES = \
-Ilwip-1.4.1/src/include \
-Ilwip-1.4.1/src/include/arch \
-Ilwip-1.4.1/src/include/ipv4 \
\
-I2440bsp/include

include FreeRTOS-Kernel/Makefile


# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS += $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections -std=gnu99

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif


# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"


#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = lwip.ld

# libraries
LIBS = -lc -lm -lnosys
LIBDIR = 
LDFLAGS = $(MCU) -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections -nostartfiles
# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin


#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	$(SZ) $@
	$(PREFIX)objdump -D -m arm $(BUILD_DIR)/$(TARGET).elf > $(BUILD_DIR)/$(TARGET).dis

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@	
	
$(BUILD_DIR):
	mkdir $@		

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)
  
#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***
